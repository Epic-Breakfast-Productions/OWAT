import java.text.SimpleDateFormat
import groovy.swing.SwingBuilder

/*
 * This build file was initially auto generated by running the Gradle 'init' task
 * by 'Greg Stewart' at '3/21/17 9:02 PM' with Gradle 2.10
 *
 */

plugins {
	id "com.jfrog.bintray" version "1.7.3"
	id "java"
	id "java-library"
	id "maven"
	id "maven-publish"
}

repositories {
	jcenter()
}

group="com.ebp.owat.lib"
version="1.5.0";

// Dependencies for the library
dependencies {
	//logging dependencies
	compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.+'
	compile 'org.apache.logging.log4j:log4j-api:2.+'
	compile 'org.apache.logging.log4j:log4j-core:2.+'
	compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2+'
	compile 'com.fasterxml.jackson.core:jackson-databind:2+'

	//for processing command line arguments
	compile 'args4j:args4j:2.33'
	compile 'args4j:args4j-site:2.33'

	//for actual code needs
	compile 'com.fasterxml.jackson.core:jackson-databind:2.9.+'

	//test dependencies
	testCompile 'junit:junit:4.12'
	testCompile 'com.google.guava:guava:23.6-jre'
	testCompile 'pl.pragmatists:JUnitParams:1.1.1'
}


String projectPropertiesFile = "project.properties";
String projectPropertiesDir = "$projectDir/src/test/resources/";
/**
 * Writes out the version configuration for the app.
 */
//noinspection GroovyAssignabilityCheck
task writeVersionConfig() {
	doLast {
		new File(projectPropertiesDir + projectPropertiesFile).text = """
################################################################
#                                                              #
# Main properties file. Contains values used in the lib.       #
#                                                              #
# AUTOGENERATED BY GRADLE AT BUILD TIME. DO NOT EDIT THIS FILE #
#                                                              #
################################################################

# the version of the library code
lib.version = $version
# the time of build
lib.buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
"""
		sleep((int)(0.25 * 1000));
	}
}

task deleteVersionConfig(type: Delete) {
	delete fileTree(projectPropertiesDir) {
		include "**/$projectPropertiesFile"
	}
}

compileJava {
	dependsOn 'writeVersionConfig';
}

clean {
	dependsOn 'deleteVersionConfig';
}

/* TODO:: finish (https://github.com/bintray/gradle-bintray-plugin) *
//really close, for some reason not including any packages?
String prompt(String prompt){
	def result = null;
	def console = System.console()
	if (console) {
		result = console.readLine('> ${prompt}: ')
	} else {
		new SwingBuilder().edt {
			dialog(modal: true,
				title: "${prompt}",
				alwaysOnTop: true,
				resizable: false,
				locationRelativeTo: null,
				pack: true,
				show: true
			) {
				vbox {
					label(text: "Enter ${prompt}:")
					input = passwordField()
					button(defaultButton: true, text: 'OK', actionPerformed: {
						result = input.password;
						dispose();
					})
				}
			}
		}
	}
	if(result == null){
		throw new IllegalArgumentException(prompt + " not given.");
	}
	return result;
}

bintray {
	user = "";//prompt('Bintray Username');
	key = "";//prompt('Bintray API Key');
	pkg {
		repo = 'OWAT-J'
		name = 'OWAT-J-lib'
		licenses = ['Apache-2.0']
		vcsUrl = 'https://github.com/Epic-Breakfast-Productions/OWAT.git'
		version {
			name = version
			desc = 'OWAT-J Library '//+prompt("Release description (Release, Bigfix, etc)")
			released  = new Date()
			vcsTag = version
		}
	}
}

// Create the pom configuration:
def pomConfig = {
	licenses {
		license {
			name "The Apache Software License, Version 2.0"
			url "http://www.apache.org/licenses/LICENSE-2.0.txt"
			distribution "repo"
		}
	}
	developers {
		developer {
			id "gregjohnstewart"
			name "Greg Stewart"
			email "contact@gjstewart.net"
		}
	}

	scm {
		url "https://github.com/Epic-Breakfast-Productions/OWAT"
	}
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier "sources"
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

// Create the publication with the pom configuration:
publishing {
	publications {
		MyPublication(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			groupId group
			artifactId 'OWAT-J-lib'
			version version
			pom.withXml {
				def root = asNode()
				root.appendNode('description', 'Java implementation of the OWAT protocol.')
				root.appendNode('name', 'OWAT-J-lib')
				root.appendNode('url', 'https://github.com/Epic-Breakfast-Productions/OWAT')
				root.children().last() + pomConfig
			}
		}
	}
}
/* */